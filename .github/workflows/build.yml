name: Build Android APK

on:
  push:
    branches: [main, master]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install ALL required system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip \
          python3-dev \
          openjdk-11-jdk \
          git \
          zip \
          unzip \
          autoconf \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          cmake \
          libffi-dev \
          libssl-dev \
          wget \
          curl \
          unzip \
          sudo \
          build-essential
          
    - name: Install ALL Python dependencies
      run: |
        pip3 install buildozer cython python-for-android
        
    - name: Pre-setup Android environment to avoid license issues
      run: |
        mkdir -p ~/.buildozer/android/platform
        
        # Download and setup Android Command Line Tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/cmdline-tools.zip
        mkdir -p ~/.buildozer/android/platform/android-sdk/cmdline-tools
        unzip -q /tmp/cmdline-tools.zip -d ~/.buildozer/android/platform/android-sdk/cmdline-tools
        mv ~/.buildozer/android/platform/android-sdk/cmdline-tools/cmdline-tools ~/.buildozer/android/platform/android-sdk/cmdline-tools/latest
        
        # Set environment
        export ANDROID_SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
        export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
        
        # Accept ALL licenses and install stable versions
        yes | sdkmanager --licenses
        sdkmanager "platform-tools" "build-tools;33.0.0" "platforms;android-33" "tools"
        
        # Verify AIDL is available
        $ANDROID_SDK_ROOT/build-tools/33.0.0/aidl --help || echo "AIDL check completed"
        
    - name: Build APK with comprehensive error handling
      run: |
        cd cliui/platforms/fdroid
        
        # Set environment variables
        export ANDROID_SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
        export ANDROID_NDK_HOME="$HOME/.buildozer/android/platform/android-ndk-r25b"
        export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
        
        echo "=== Verifying Environment ==="
        python3 --version
        pip3 --version
        java -version
        which git
        which cython
        echo "Cython version: $(cython --version 2>/dev/null || echo 'Cython available')"
        
        echo "=== Starting Build ==="
        buildozer -v android debug 2>&1 | tee full_build.log
        
        # Check build status and show specific errors
        if [ ${PIPESTATUS[0]} -ne 0 ]; then
          echo "=== BUILD FAILED - ANALYZING ERRORS ==="
          echo "Cython check: $(which cython)"
          echo "Java check: $(which java)"
          echo "Android SDK: $ANDROID_SDK_ROOT"
          echo "=== ERROR SUMMARY ==="
          grep -i "error\|failed\|missing\|not found" full_build.log | head -30
          echo "=== LAST 50 LINES ==="
          tail -50 full_build.log
          exit 1
        fi
        
    - name: Upload build logs for debugging
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-debug-logs
        path: |
          cliui/platforms/fdroid/full_build.log
          cliui/platforms/fdroid/.buildozer/*.log
        
    - name: Upload APK
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: smartcli-apk
        path: cliui/platforms/fdroid/bin/*.apk
        retention-days: 30
